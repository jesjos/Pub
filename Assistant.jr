import edu.ucdavis.jr.*;
import java.util.ArrayList;
import java.util.ArrayDeque;
import java.util.Collection;

public class Assistant {
  private ArrayList<Table> tables;
  private ArrayDeque<ServingArea.Glass> glasses = new ArrayDeque<ServingArea.Glass>();
  private ArrayDeque<ServingArea.Cup> cups = new ArrayDeque<ServingArea.Cup>();
  
  private Clock clock;
  private ServingArea sa;
  private op void alarm ();
  
  private cap void () pubIsEmpty;
  private cap void () assistantDone;
  
  public Assistant(Collection<Table> tables, Clock clock, ServingArea sa, cap void () pubIsEmpty, cap void () assistantDone) {
    this.tables = new ArrayList<Table>(tables);
    this.clock = clock;
    this.sa = sa;
    this.assistantDone = assistantDone;
    
    this.pubIsEmpty = pubIsEmpty;
  }
  
  /* Main loop
   * Cleans tables sequentially. Checks if pub is empty
   */
  process work {
    int nTables = Constants.N_OF_TABLES;
    int i = 0;
    while (true) {
      cleanTable(i);
      i = (i + 1) % Constants.N_OF_TABLES;
      send clock.setAlarm(alarm, Constants.REST);
      receive alarm();
      
      inni void pubIsEmpty() {
        break;
      }
      [] else {
        ;
      }
      
    }
    
    doLastRounds();
    System.out.println("Assistant: Finished, I go home.");
    send assistantDone();
  }
  
  public void doLastRounds() {
    for (int i = 0; i < tables.size(); i++) {
      cleanTable(i);
    }
  }
  
  public void cleanTable(int i) {
    System.out.println("Cleaning table number " + i);
    Table t = tables.get(i);
    
    // Get all glasses from the table
    ServingArea.Glass glass;
    glass = t.getGlass();
    while (glass != null) {
      glasses.push(glass);
      glass = t.getGlass();
    }
    
    // Get all cups from the table
    ServingArea.Cup cup;
    cup = t.getCup();
    while (cup != null) {
      cups.push(cup);
      cup = t.getCup();
    }
    
    // Go wash the glasses
    for (ServingArea.Glass g : glasses) {
      send clock.setAlarm(alarm, Constants.WASH);
      receive alarm();
    }
    
    // Wash the cups
    for (ServingArea.Cup c : cups) {
      send clock.setAlarm(alarm, Constants.WASH);
      receive alarm();
    }
    
    // Replace into cupboard
    while (glasses.peek() != null){
      call sa.replaceGlass(glasses.poll());
      send clock.setAlarm(alarm, Constants.REPLACE);
      receive alarm();
    }
    
    while (cups.peek() != null){
      call sa.replaceCup(cups.poll());
      send clock.setAlarm(alarm, Constants.REPLACE);
      receive alarm();
    }
    
  }
  
}