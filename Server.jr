import edu.ucdavis.jr.*;

public class Server {
	protected cap Resource (Constants.Order) orderQueue;
	protected cap ServingArea.Glass () getGlass;
	protected cap ServingArea.Cup () getCup;
	protected cap void () closingTime;
	protected cap void () milk;
	protected cap void () coffee;
	protected cap void () choco;
	protected cap void () tap;
	protected op void alarm ();
	protected boolean closed;
	protected boolean customersLeft;
	protected Clock clock;

	public Server (
			cap Resource (Constants.Order) orderQueue, 
			cap void ()[] singleResources,
			cap ServingArea.Glass () getGlass,
			cap ServingArea.Cup ()   getCup,
			cap void ()           closingTime,
			Clock clock
	) {
		this.orderQueue = orderQueue;
		this.getCup   = getCup;
		this.getGlass = getGlass;
		this.closingTime = closingTime;
		this.clock = clock;
		closed = false;
		customersLeft = true;

		milk = singleResources[Constants.MILK];
		coffee = singleResources[Constants.COFFEE];
		choco = singleResources[Constants.CHOCO];
		tap = singleResources[Constants.TAP];

	}

	private process serve {

		while (customersLeft) {
			if (this instanceof Barmaid && closed) {
				System.out.println("\t\t\tBarmaid says: Screw you guys, I'm going home!");
				break;
			}
			if (closed) {
			  inni Resource orderQueue(Constants.Order order) {
			    System.out.println("------------------------>>> Refusing to serve.");
			    return new ServingArea.Refusal();
			  }
			} else {
  			inni Resource orderQueue(Constants.Order order) {
  				System.out.println("Got an order");
  				switch (order) {
  				case BEER : System.out.println("BEER"); return getBeer();
  				case CAPPU : System.out.println("CAPPU"); return getCappu();
  				case CHOCO : System.out.println("CHOCO"); return getChoco();
  				}
  				return ;
				}
			}
		}
	}

	private process checkForClosingTime {
		receive closingTime();
		closed = true;
	}

	protected ServingArea.Glass getBeer() {
		System.out.println("Servicing order");
		ServingArea.Glass glass = getGlass();
		receive tap();
		clock.setAlarm(alarm , Constants.POURBEER);
		receive alarm();
		System.out.println(Thread.currentThread() + "Is pouring a beer");
		// Pour the beer
		send tap();
		return glass;

	}
	protected ServingArea.Cup getCappu() {
		System.out.println("Servicing order");
		ServingArea.Cup cup = getCup();
		receive coffee();
		clock.setAlarm(alarm , Constants.GETCOFFEE);
		receive alarm();
		receive milk();
		clock.setAlarm(alarm , Constants.GETMILK);
		receive alarm();
		clock.setAlarm(alarm , Constants.MIXCOFFEE);
		System.out.println(Thread.currentThread() + "Is pouring a cappucino");
		// Pour the cappucino
		send milk();
		send coffee();
		return cup;
	}
	protected ServingArea.Cup getChoco() {
		System.out.println("Servicing order");
		ServingArea.Cup cup = getCup();
		receive choco();
		clock.setAlarm(alarm , Constants.GETCHOCOPOWDER);
		receive alarm();
		receive milk();
		clock.setAlarm(alarm , Constants.GETMILK);
		receive alarm();
		clock.setAlarm(alarm , Constants.MIXCHOCO);
		System.out.println(Thread.currentThread() + "Is pouring a choco");
		// Pour the choco
		send milk();
		send choco();
		return cup;    
	}
}