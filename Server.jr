import edu.ucdavis.jr.*;

public class Server {
	protected cap Resource (Constants.Order, MyTime) orderQueue;
	protected cap ServingArea.Glass () getGlass;
	protected cap ServingArea.Cup () getCup;
	protected cap void () closingTime, milk, coffee, choco, tap;
	protected cap void (MyTime) statistics;
  // protected cap void () milk;
  // protected cap void () coffee;
  // protected cap void () choco;
  // protected cap void () tap;
	protected op void alarm ();
	protected boolean closed;
	protected Clock clock;
	
	protected int cups = 0;
	protected int glasses = 0;
	
	public Server (
			cap Resource (Constants.Order, MyTime) orderQueue, 
			cap void ()[] singleResources,
			cap ServingArea.Glass () getGlass,
			cap ServingArea.Cup ()   getCup,
			cap void ()           closingTime,
			Clock clock,
			cap void (MyTime) statistics
	) {
		this.orderQueue = orderQueue;
		this.getCup   = getCup;
		this.getGlass = getGlass;
		this.closingTime = closingTime;
		this.clock = clock;
		this.statistics = statistics;
		closed = false;
		
		milk = singleResources[Constants.MILK];
		coffee = singleResources[Constants.COFFEE];
		choco = singleResources[Constants.CHOCO];
		tap = singleResources[Constants.TAP];

	}

	protected ServingArea.Glass getBeer() {
		System.out.println(this.getClass().getName() + "Servicing order");
		ServingArea.Glass glass = getGlass();
		receive tap();
		clock.setAlarm(alarm , Constants.POURBEER);
		receive alarm();
		System.out.println(this.getClass().getName() + "Is pouring a beer");
		// Pour the beer
		send tap();
		glasses++;
		return glass;

	}
	protected ServingArea.Cup getCappu() {
		System.out.println(this.getClass().getName() + "Servicing order");
		ServingArea.Cup cup = getCup();
		receive coffee();
		clock.setAlarm(alarm , Constants.GETCOFFEE);
		receive alarm();
		receive milk();
		clock.setAlarm(alarm , Constants.GETMILK);
		receive alarm();
		clock.setAlarm(alarm , Constants.MIXCOFFEE);
		System.out.println(this.getClass().getName() + "Is pouring a cappucino");
		// Pour the cappucino
		send milk();
		send coffee();
		cups++;
		return cup;
	}
	protected ServingArea.Cup getChoco() {
		System.out.println(this.getClass().getName() + "Servicing order");
		ServingArea.Cup cup = getCup();
		receive choco();
		clock.setAlarm(alarm , Constants.GETCHOCOPOWDER);
		receive alarm();
		receive milk();
		clock.setAlarm(alarm , Constants.GETMILK);
		receive alarm();
		clock.setAlarm(alarm , Constants.MIXCHOCO);
		System.out.println(this.getClass().getName() + "Is pouring a choco");
		// Pour the choco
		send milk();
		send choco();
		cups++;
		return cup;    
	}
}