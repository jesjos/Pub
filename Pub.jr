import edu.ucdavis.jr.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;

/**
 * Central controlling class for a pub simulation.
 * Starts all processes, generates statistics.
 * @author Jesper Josefsson
 * @author Anmar Khazal
 */

public class Pub {
  
  private op void lastCall ();
  private op void close();
  private op Resource orderQueue (Constants.Order);
  private cap void (cap void()) handshakeQueue;
  
  public op void print(String);
  
  private Clock clock;
  private Landlord landlord;
  
  ArrayList<Table> tables = new ArrayList<Table>();
  
  private boolean closed = false;
  
  public Pub () {
    initialize();
  }
  
  public void initialize() {
    
    clock = new Clock(1, new MyTime(0, 59, 0));
    
    for (int i = 0; i < Constants.N_OF_TABLES; i++ ) {
      tables.add(new Table()); 
    }
    
    ServingArea sa = new ServingArea(clock);
   
    new Barmaid(orderQueue, sa.getSingleResources(), sa.refGlass(), sa.refCup(), close, clock);
    landlord = new Landlord(lastCall, orderQueue, sa.getSingleResources(), sa.refGlass(), sa.refCup(), close, clock);
    new Assistant(tables, clock, sa, close, landlord.pubIsEmpty, landlord.assistantDone);
    handshakeQueue = landlord.getHandShakeQueue();

  }
  
  process addCustomer {
    op void alarm();
    int randomTable;
    while (!closed) {
      randomTable = (int) (Math.random()*Constants.N_OF_TABLES);
      send print("Generated customer with favourite table " + randomTable);
      new Customer(orderQueue, handshakeQueue, tables.get(randomTable), clock);
      
      send clock.setAlarm(alarm, Constants.CUSTOMER_DROPINTIME);
      receive alarm();
      
      send print("Added a customer");
    }
  }
  
  process closingTime {
    op void isClosingTime();
    clock.setAlarmEndTime(isClosingTime);
    receive isClosingTime();
    closed = true;
    System.out.println("------------------------------------------> Closing Time");
    
    for (int i = 0; i< Constants.NUMBER_OF_STAFF; i++)
      send close();
  }
  
  process printer {
    String s;
    while (!closed) {
      receive print(s);
      System.out.println(s);
    }
  }
  
  public static void main(String[] args) {
    Pub p = new Pub();
  }
}