import edu.ucdavis.jr.*;
import java.util.ArrayDeque;
import java.util.HashMap;

public class ServingArea {
  
  private ArrayDeque<Glass> glasses;
  private ArrayDeque<Cup> cups;
  
  public op void replaceGlass(Glass); 
  public op void replaceCup(Cup);
  
  private op Glass getGlass();
  private op Cup getCup();
  private op void milk();
  private op void coffee();
  private op void choco();
  private op void tap();
  private cap void ()[] singleResources = new cap void ()[4];
  
  public ServingArea() {
    glasses = new ArrayDeque<Glass>();
    cups = new ArrayDeque<Cup>();
    
    for (int i = 0; i < Constants.GLASSES; i++)
      glasses.add(new Glass());
    for (int i = 0; i < Constants.CUPS; i++)
      cups.add(new Cup());
    
    singleResources[Constants.MILK] = milk;
    singleResources[Constants.COFFEE] = coffee;
    singleResources[Constants.CHOCO] = choco;
    singleResources[Constants.TAP] = tap;
    
    // Initialize single resources for use
    send milk();
    send coffee();
    send choco();
    send tap();
  }
  
  public cap void ()[] getSingleResources() {
    return singleResources;
  }
  
  public cap Glass () refGlass() {
    cap Glass () ref = getGlass;
    return ref;
  }
  
  public cap Cup () refCup() {
    cap Cup () ref = getCup;
    return ref;
  }
  
  public cap void (Glass) getReplaceGlass() {
    cap void (Glass) ref = replaceGlass;
    return ref;
  }
  
  private process serveGlasses {
    while (true) {
      inni Glass getGlass() st !glasses.isEmpty() {
        return glasses.pop();
      }
      [] void replaceGlass(Glass g) {
        System.out.println("Replace a glass, current number: " + glasses.size());
        glasses.add(g);
      }
    }
  }
  
  private process serveCups {
    while (true) {
      inni Cup getCup() st !cups.isEmpty() {
        return cups.pop();
      }
      [] void replaceCup(Cup g) {
        cups.add(g);
      }
    }
  }
  
  // Resource classes
  
  public static class Glass implements Resource {
    
  }
  
  public static class Cup implements Resource {
    
  }
  
  public static class Milk implements Resource {
    
  }
  
  public static class Chocolate implements Resource {
    
  }
}