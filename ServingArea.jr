import edu.ucdavis.jr.*;
import java.util.ArrayDeque;
import java.util.HashMap;

public class ServingArea {

  private ArrayDeque<Glass> glasses;
  private ArrayDeque<Cup> cups;

  public op void replaceGlass(Glass); 
  public op void replaceCup(Cup);

  public op int howManyCupsLeft();
  public op int howManyGlassesLeft();
  public op void closeServingArea();
  
  public op Glass getGlass();
  public op Cup getCup();
  public op void milk();
  public op void coffee();
  public op void choco();
  public op void tap();
  private cap void ()[] singleResources = new cap void ()[4];

  private Clock clock;

  public ServingArea(Clock clock) {
    glasses = new ArrayDeque<Glass>();
    cups = new ArrayDeque<Cup>();
    this.clock = clock;


    for (int i = 0; i < Constants.GLASSES; i++)
      glasses.add(new Glass());
    for (int i = 0; i < Constants.CUPS; i++)
      cups.add(new Cup());

    singleResources[Constants.MILK] = milk;
    singleResources[Constants.COFFEE] = coffee;
    singleResources[Constants.CHOCO] = choco;
    singleResources[Constants.TAP] = tap;

    // Initialize single resources for use
    send milk();
    send coffee();
    send choco();
    send tap();
  }

  public cap void ()[] getSingleResources() {
    return singleResources;
  }

  public cap Glass () refGlass() {
    cap Glass () ref = getGlass;
    return ref;
  }

  public cap Cup () refCup() {
    cap Cup () ref = getCup;
    return ref;
  }

  public cap void (Glass) getReplaceGlass() {
    cap void (Glass) ref = replaceGlass;
    return ref;
  }

  private process serveGlasses {
    op void alarm ();
    while (true) {
      inni Glass getGlass() st !glasses.isEmpty() {
        clock.setAlarm(alarm , Constants.GETGLASS);
        receive alarm();
        return glasses.pop();
      }
      [] void replaceGlass(Glass g) {
        clock.setAlarm(alarm, Constants.REPLACE);
        receive alarm();
        glasses.add(g);
        System.out.println("Replaced a glass, current number: " + glasses.size());
      }
    }
  }

  private process serveCups {
    op void alarm ();
    while (true) {
      inni Cup getCup() st !cups.isEmpty() {
        clock.setAlarm(alarm , Constants.GETCUP);
        receive alarm();
        return cups.pop();
      }
      [] void replaceCup(Cup g) {
        clock.setAlarm(alarm, Constants.REPLACE);
        receive alarm();
        cups.add(g);
        System.out.println("Replace a cup, current number: " + cups.size());
      }
    }
  }

  private process closeAndCheckStats {
    boolean closed = false;
    while (!closed) {
      inni int howManyCupsLeft () {
        return cups.size();
      }
      [] int howManyGlassesLeft() {
        return glasses.size();
      }
      [] void closeServingArea() {
        closed = true;
      }
      
    }
  }

  // Resource classes

  public static class Glass implements Resource {

  }

  public static class Cup implements Resource {

  }

  public static class Milk implements Resource {

  }

  public static class Chocolate implements Resource {

  }

}