import edu.ucdavis.jr.*;
import java.util.Collection;
import java.util.ArrayDeque;

public class Table {
  
  private int space;
  private ArrayDeque<ServingArea.Glass> glasses;
  private ArrayDeque<ServingArea.Cup> cups;
  private op ServingArea.Glass getGlass ();
  private op ServingArea.Cup getCup();
  private op void putGlass (ServingArea.Glass);
  private op void putCup (ServingArea.Cup);
  private op void put (Resource);
  
  public Table () {
    this.space = Constants.TABLE_SPACE;
    glasses = new ArrayDeque<ServingArea.Glass>();
    cups = new ArrayDeque<ServingArea.Cup>();
  }
  
  public cap void(ServingArea.Glass) getPutGlass() {
    return putGlass;
  }

  public cap void(ServingArea.Cup) getPutCup() {
    return putCup;
  }
  
  public cap ServingArea.Cup() getGetCup() {
    return getCup;
  }
  
  public cap ServingArea.Glass() getGetGlass() {
    return getGlass;
  }
  
  private process p {
    while (true) {
      inni void putGlass (ServingArea.Glass g) st !(space < 2) {
        space -= 2;
        glasses.push(g);
      }
      [] void putCup (ServingArea.Cup c) st !(space < 1) {
        space--;
        cups.push(c);
      }
      [] ServingArea.Glass getGlass () {
        return glasses.poll();
      }
      [] ServingArea.Cup getCup () {
        return cups.poll();
      }
    }
  } 
  
  
}