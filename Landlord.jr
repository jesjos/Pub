import edu.ucdavis.jr.*;
import java.util.ArrayList;
import java.util.HashMap;

public class Landlord extends Server {

  private cap void () lastCall;
  private op void handshakeQueue (Customer);
  private ArrayList<Customer> customers = new ArrayList<Customer>();
  private ArrayList<MyTime> stats = new ArrayList<MyTime>();
  private int totalCustomers = 0;

  public op void pubIsEmpty ();
  public op void assistantDone();

  public Landlord(
    cap void () lastCall,
    cap Resource (Constants.Order, MyTime) orderQueue, 
    cap void () closingTime,
    Clock clock,
    cap void (MyTime) statistics,
    ServingArea sa
  ) {

    super(orderQueue, closingTime, clock,statistics, sa);
    this.lastCall = lastCall;
  }

  public cap void (Customer) getHandShakeQueue() {
    return handshakeQueue;
  }		

  private process serve {
    boolean customersLeft = true;
    boolean closed = false;
    Resource drink = null;

    while (!customers.isEmpty() || !closed) {
      inni void closingTime() by 0 {
              closed = true;
      }
      [] void lastCall() by 1 {
        for (Customer customer: customers)
          send customer.lastCall();
        System.out.println("-----------------------------> Sent last call.");
      }
      
      [] Resource orderQueue(Constants.Order order, MyTime orderStartTime) {
        if (closed) {
          return new Refusal();
        } else {
          System.out.println("Start: " + clock.getTime());
          switch (order) {
            case BEER  :  drink = getBeer(); break;
            case CAPPU :  drink = getCappu(); break;
            case CHOCO :  drink = getChoco(); break;
          }
          send statistics(new MyTime(clock.getTime().compareTo(orderStartTime)));
          return drink;
        }
      }
      [] void handshakeQueue (Customer customer) {
        if(customers.contains(customer)) {
          customers.remove(customer);
          System.out.println("Someone left, now " + customers.size() + " customers left.");
        }
        else {
          customers.add(customer);
          totalCustomers++;
        }
      }
      [] void statistics (MyTime orderTime) {
        stats.add(orderTime);
      }
      
    } // -- end while
    
    System.out.println("Sending pub is empty");
    send pubIsEmpty();
    
    receive assistantDone();
    // Compile stats
    clock.shutdown();
    compileStats();
    send sa.closeServingArea(); 
  }// -- end serve  

  public void compileStats(){
    MyTime lo = new MyTime(23,59,59);
    MyTime hi = new MyTime(0,0,0);
    int sum = 0;

    for (MyTime t : stats) {
      sum += t.getValue();
      if (t.compareTo(lo) < 0)
        lo = t;
      if (t.compareTo(hi) > 0)
        hi = t;
    }

    int average = sum/stats.size();
    
    System.out.println("Glasses now: " + sa.howManyGlassesLeft() + " should be: " + Constants.GLASSES);
    System.out.println("Cups now: " + sa.howManyCupsLeft() + " should be: " + Constants.CUPS);
    
    System.out.println("Highest time: " + hi);
    System.out.println("Lowest time: " + lo);
    System.out.println("Average time: " + new MyTime(average));
    System.out.println("Total number of customers served: " + totalCustomers);
  }
  
  public static class Refusal implements Resource {

  }

}