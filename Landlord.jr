import edu.ucdavis.jr.*;
import java.util.ArrayList;
import java.util.HashMap;

public class Landlord extends Server {

	private cap void () lastCall;
	private op void handshakeQueue (cap void());
	private ArrayList<cap void ()> customers = new ArrayList<cap void()>();; 

	public op void pubIsEmpty ();
	public op void assistantDone();
	
	public Landlord(cap void () lastCall,
			cap Resource (Constants.Order, MyTime) orderQueue, 
			cap void ()[] singleResources,
			cap ServingArea.Glass () getGlass,
			cap ServingArea.Cup ()   serveCup,
			cap void ()           closingTime,
			Clock clock
	) {

		super(orderQueue, singleResources, getGlass, serveCup, closingTime, clock);
		this.lastCall = lastCall;
	}

	public cap void (cap void ()) getHandShakeQueue() {
		return handshakeQueue;
	}		

	private process greet {
		cap void () customer;
		boolean isEmpty = false;
		while (!isEmpty) {
			receive handshakeQueue(customer);
			System.out.println("Received a handshake, number of customers is " + customers.size());
			if(customers.contains(customer)) {
				customers.remove(customer);
				if(customers.isEmpty()) {
				  System.out.println("Sending pub is empty");
					send pubIsEmpty();
					isEmpty = true;
				}
			}
			else{
				customers.add(customer);
			}
			receive assistantDone();
			
		}
	}

	private process checkLastCall {
		receive lastCall();
		for (cap void() c : customers)
			send c();
	}

}