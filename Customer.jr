import edu.ucdavis.jr.*;

public class Customer {
  private cap Resource (Constants.Order, MyTime) orderQueue;
  private cap void (Customer) handShake;
  private op Resource order (Constants.Order);
  public op void lastCall ();
  private cap void (ServingArea.Glass) putGlass;
  private cap void (ServingArea.Cup) putCup;
  private Resource drink;
  private Clock clock;
  private int numberOfDrinks;
  private op void alarm ();
  private Constants.Order myOrder;

  public Customer(
    cap Resource (Constants.Order, MyTime) orderQueue,
    cap void (Customer) handShake,
    Table favouriteTable, 
    Clock clock
    ) {
    this.orderQueue = orderQueue;
    this.handShake = handShake;
    this.clock = clock;

    putCup = favouriteTable.getPutCup();
    putGlass = favouriteTable.getPutGlass();
    numberOfDrinks = 0;

    myOrder = Constants.Order.values()[(int) (Math.random() * 3)];

    send handShake(this);
  }

  process mainLoop {
    MyTime t; 
    while (numberOfDrinks < Constants.MAX_DRINKS) {
      t = new MyTime(clock.getTime().getValue());
      drink = orderQueue(myOrder, t);
      if (drink instanceof Landlord.Refusal) {
        System.out.println("Customer says: I was refused!!");
        break;
      }
      numberOfDrinks++;
           
      // Go to table
      // Drink
      // Beer drinkers need to be able to interrupt their drinking
      // in order to respond to the last call
      
      send clock.setAlarm(alarm, Constants.DRINK_TIME);
      inni void alarm();
      [] void lastCall() st (myOrder == Constants.Order.BEER) {
        numberOfDrinks = 4;
        System.out.println("I received a last call message.");
      }
      
      // Place drink on table
      if (drink instanceof ServingArea.Cup) {
        call putCup((ServingArea.Cup) drink);
      } else {
        call putGlass((ServingArea.Glass) drink);
      }
      
      drink = null;
    }
    System.out.println("Customer going home.");
    send handShake(this);
  }

}